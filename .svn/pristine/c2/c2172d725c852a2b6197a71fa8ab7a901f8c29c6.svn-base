<template>
  <div class="app-container calendar-list-container">

    <!-- 查询和其他操作 -->
    <div class="filter-container">
      <el-input clearable class="filter-item" style="width: 200px;" placeholder="请输入商品ID" v-model="listQuery.goodsId">
      </el-input>
      <el-button class="filter-item" type="primary" v-waves icon="el-icon-search" @click="handleFilter">查找</el-button>
      <el-button class="filter-item" type="primary" @click="handleCreate" icon="el-icon-edit">添加</el-button>
      <el-button class="filter-item" type="primary" :loading="downloadLoading" v-waves icon="el-icon-download" @click="handleDownload">导出</el-button>
    </div>

    <!-- 查询结果 -->
    <el-table size="small" :data="list" v-loading="listLoading" element-loading-text="正在查询中。。。" border fit highlight-current-row>

      <el-table-column type="expand">
        <template slot-scope="scope">
          <el-table label-position="left" class="demo-table-expand" :data="scope.row.recordValueList">
            <el-table-column align="center" label="操作" width="250" class-name="small-padding fixed-width">
              <template slot-scope="props2">
                <el-button type="primary" size="mini" @click="handleUpdate(props2.row)">编辑</el-button>
                <el-button type="danger" size="mini"  @click="handleDelete(props2.row)" v-show="scope.row.status === 0 ? true : false">禁用</el-button>
              </template>
            </el-table-column>
            <!-- <el-table-column label="编号">
              <template scope="props">
                <span>{{props.row.name}}</span>
              </template>
            </el-table-column> -->
            <el-table-column align="center" width="150px" label="显示类型" prop="displayType">
              <template slot-scope="scope">
                <el-tag :type="scope.row.displayType === 0 ? 'success' : 'error' ">{{scope.row.displayType === 0 ? '商品分类' : '商品'}}</el-tag>
              </template>
            </el-table-column>

            <el-table-column align="center" width="150px" label="内容id" prop="displayId">
            </el-table-column>

            <el-table-column align="center" min-width="200px" label="内容名称" prop="name">
            </el-table-column>

            <el-table-column align="center" min-width="200px" label="图片" prop="imageUrl">
              <template slot-scope="scope">
                <!-- {{scope.row.goodsSources[0].source}} -->
                <img :src="scope.row.imageUrl" alt="" style="width: 70px;height: 70px">
              </template>
            </el-table-column>

            <el-table-column align="center" min-width="100px" label="排序" prop="priority">
            </el-table-column>

            <el-table-column align="center" min-width="100px" label="是否禁用" prop="status">
              <template slot-scope="scope">
                <el-tag :type="scope.row.status === 0 ? 'success' : 'error' ">{{scope.row.status === 0 ? '正常' : '禁用'}}</el-tag>
              </template>
            </el-table-column>

            <el-table-column align="center" min-width="150px" label="创建时间" prop="createTime">
            </el-table-column>

            <el-table-column align="center" min-width="150px" label="修改时间" prop="updateTime">
            </el-table-column>
          </el-table>

          <!-- <el-table size="small" :data="props.row.recordValueList" border fit highlight-current-row>
            <el-table-column align="center" width="150px" label="属性名称" prop="name">
            </el-table-column>
          </el-form> -->

        </template>
      </el-table-column>

      <el-table-column align="center" width="150px" label="位置" prop="position" sortable>
      </el-table-column>

      <el-table-column align="center" min-width="100px" label="排序" prop="priority">
      </el-table-column>

      <el-table-column align="center" min-width="100px" label="创建时间" prop="createTime">
      </el-table-column>

      <el-table-column align="center" min-width="200px" label="修改时间" prop="updateTime">
      </el-table-column>
    </el-table>

    <!-- 分页 -->
    <div class="pagination-container">
      <el-pagination background @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="listQuery.page"
        :page-sizes="[10,20,30,50]" :page-size="listQuery.limit" layout="total, sizes, prev, pager, next, jumper" :total="total">
      </el-pagination>
    </div>

    <!-- 添加或修改对话框 -->
    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form :rules="rules" ref="dataForm" :model="dataForm" status-icon label-position="left" label-width="100px" style='width: 400px; margin-left:50px;'>
        <el-form-item label="商品ID" prop="goodsId">
          <el-input v-model="dataForm.goodsId"></el-input>
        </el-form-item>
        <el-form-item label="商品规格名" prop="specification">
          <el-input v-model="dataForm.specification"></el-input>
        </el-form-item>
        <el-form-item label="商品规格值" prop="value">
          <el-input v-model="dataForm.value"></el-input>
        </el-form-item>
        <el-form-item label="商品规格图片" prop="picUrl">
          <el-input v-model="dataForm.picUrl"></el-input>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">取消</el-button>
        <el-button v-if="dialogStatus=='create'" type="primary" @click="createData">确定</el-button>
        <el-button v-else type="primary" @click="updateData">确定</el-button>
      </div>
    </el-dialog>

  </div>
</template>

<script>
import { listGoodsSpecification, createGoodsSpecification, updateGoodsSpecification, deleteGoodsSpecification } from '@/api/goods-specification'
import waves from '@/directive/waves' // 水波纹指令

export default {
  name: 'GoodsSpecification',
  directives: {
    waves
  },
  data() {
    return {
      list: null,
      total: null,
      listLoading: true,
      listQuery: {
        page: 1,
        limit: 20,
        goodsId: undefined,
        sort: '+id'
      },
      dataForm: {
        position: undefined,
        priority: undefined,
        createTime: undefined,
        updateTime: undefined
      },
      dialogFormVisible: false,
      dialogStatus: '',
      textMap: {
        update: '编辑',
        create: '创建'
      },
      rules: {
        goodsId: [{ required: true, message: '商品ID不能为空', trigger: 'blur' }],
        specification: [{ required: true, message: '商品规格名称不能为空', trigger: 'blur' }],
        value: [{ required: true, message: '商品规格值不能为空', trigger: 'blur' }]
      },
      downloadLoading: false
    }
  },
  created() {
    this.getList()
  },
  methods: {
    getList() {
      this.listLoading = true
      listGoodsSpecification(this.listQuery).then(response => {
        this.list = response.data.recordList
        this.total = response.data.totalCount
        this.listLoading = false
      }).catch(() => {
        this.list = []
        this.total = 0
        this.listLoading = false
      })
    },
    handleFilter() {
      this.listQuery.page = 1
      this.getList()
    },
    handleSizeChange(val) {
      this.listQuery.limit = val
      this.getList()
    },
    handleCurrentChange(val) {
      this.listQuery.page = val
      this.getList()
    },
    resetForm() {
      this.dataForm = {
        position: undefined,
        priority: undefined,
        createTime: undefined,
        updateTime: undefined
      }
    },
    handleCreate() {
      this.resetForm()
      this.dialogStatus = 'create'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    createData() {
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          createGoodsSpecification(this.dataForm).then(response => {
            this.list.unshift(response.data.data)
            this.dialogFormVisible = false
            this.$notify({
              title: '成功',
              message: '创建成功',
              type: 'success',
              duration: 2000
            })
          })
        }
      })
    },
    handleUpdate(row) {
      this.dataForm = Object.assign({}, row)
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    updateData() {
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          updateGoodsSpecification(this.dataForm).then(() => {
            for (const v of this.list) {
              if (v.id === this.dataForm.id) {
                const index = this.list.indexOf(v)
                this.list.splice(index, 1, this.dataForm)
                break
              }
            }
            this.dialogFormVisible = false
            this.$notify({
              title: '成功',
              message: '更新成功',
              type: 'success',
              duration: 2000
            })
          })
        }
      })
    },
    handleDelete(row) {
      deleteGoodsSpecification(row).then(response => {
        this.$notify({
          title: '成功',
          message: '删除成功',
          type: 'success',
          duration: 2000
        })
        const index = this.list.indexOf(row)
        this.list.splice(index, 1)
      })
    },
    handleDownload() {
      this.downloadLoading = true
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = ['商品规格ID', '商品ID', '商品规格名称', '商品规格值', '商品规格图片']
        const filterVal = ['id', 'goodsId', 'specification', 'value', 'picUrl']
        excel.export_json_to_excel2(tHeader, this.list, filterVal, '商品规格信息')
        this.downloadLoading = false
      })
    }
  }
}
</script>
